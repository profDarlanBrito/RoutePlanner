# Path to images it can be ./ if the images are on the same directory of the executable or ./<directory name> if it is on
# subdirectory of the executable or <drive letter>:/<directory>/<subdirectory>/.../<subdirectory>/ to absolute path
path: C:/Users/dnune/OneDrive/Documentos/VerLab/3D_Reconstruction/Images/
# The name of the image sequence without number sequence or extension
filename: reconstruct
directory name: scene_builds
# Path to save the COPS configuration file
COPS dataset: C:/Users/dnune/OneDrive/Documentos/VerLab/RoutePlanner/datasets/
# Path to write COPS result
COPS result: C:/Users/dnune/OneDrive/Documentos/VerLab/RoutePlanner/datasets/results/
# COPS problem filename
COPS problem: 3dreconstructionPathPlannerBuilds
# Path to COPS script
COPS path: C:/Users/dnune/OneDrive/Documentos/VerLab/COPS/
# Numerical sequence to image names. As an example if you want to save the images as calibimg1, calibimg2, ...
#sequence: [40,186,523,602,727,772,874,950,1030,1280,1319,1422,1440,1585,1657,1795,1924,2187,2271,2295,2379,2398,2444,2537,2587,2622,2628,2751,2828,2859]
sequence: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
#Extension to saved images
extension: png
# The total time to simulation
simulation time: 11.0
# The name of the vision sensor at CoppeliaSim
#vision sensor names: [./Vision_sensor_center, ./Vision_sensor_left, ./Vision_sensor_right]
vision sensor names: ./Vision_sensor_free
# The name of the robot that is with the camera
quadcopter name: ./target
# The quadcopter handle to get quadcotper position
quadcopter base: ./base
#Jointly used to move the target in x y axis
target joint xy: ./Revolute_joint_xy
#Joint used to move the target in x y-axis
target joint zy: ./Revolute_joint_zy
# If the robot needs a stopped time to stabilize the image before take the pictures
time to stabilize: 10.0
# The displacement that the robot will do before the simulation stops
max displacement: 0.5
# The total maximum time of the simulation
total simulation time: 0.2
# The unit displacement of the robot in three-dimensional coordinates.
displacement: [0.0,0.1,-0.05]
# The height of the checkerboard black squares corners. The height variable is the number of inner square corners of the calibration target
height: 5
# The width of the checkerboard black squares corners. The width variable is the number of inner square corners of the calibration target
width: 8
# The scale to the box size
box size scale: 0.01
# Flag to test if the file was correct
is_ok: 1
#Camera names
cams: ['cam0', 'cam1']
#Image file indexes
cam indexes: [[1, 2],[3, 4]]
# Position file name
positions file name: positions.csv
# The minimum value of the CA equation to create a group. Bigger number for route has more points
CA_max: 250
CA_min: 1
# When we increase this number, the maximum points of view radius increase. # Proportion of hemisphere radius
max route radius: 20
# Define the number of points by measure unit for points of view radius.
points per unit: 2.0
# Density of points in the radius. If the number increase density decrease
points per sphere: 2.0
# The proportion of the tallest z height to make the cylinder
height proportion: 2.0
# Define the maximum number of times that the point can be visited
max visits: 30
# Maximum number of iterations to try catch a subgroup
max iter: 1000
# Maximum travel budget
T_max: 150000
# Number of subdivisions of the horizontal discretization
n resolution: 24
# Object names like on CoppeliaSim
object names: [Bens_G63, Bobcat, T_type]
# Path to colmap
colmap folder: C:/Users/dnune/OneDrive/Documentos/VerLab/COLMAP-3.9.1-windows-cuda/COLMAP-3.9.1-windows-cuda/
# Workspace folder to colmap
workspace folder: C:/Users/dnune/OneDrive/Documentos/VerLab/COLMAP_results
# Image folder to colmap
images folder: /Images
# Number of trials for each experiment
number of trials: 1
# Near clip for vision sensor
near clip: 1e-4
# Far clip for vision sensor
far clip: 100
# Perspective angle
perspective angle: 100.0
# Compute the COLMAP dense model
dense model: 1
# Path to save experiments
save path: ./save_files/
# Python exec, on the laboratory machines, it's python3.11
python: python
# Path to CoppeliaSim obj
obj folder: obj/
# Use OBJ to avoid opening Coppelia in the convex_hull command
use obj: 0